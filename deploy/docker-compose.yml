services:
  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: asfp-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    mem_limit: 1536m
    cpus: "1.5"

  clickhouse:
    image: ${CLICKHOUSE_IMAGE}
    container_name: asfp-clickhouse
    environment:
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./init/clickhouse:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --user ${CLICKHOUSE_USER} --password ${CLICKHOUSE_PASSWORD} --query 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    mem_limit: 2048m
    cpus: "2.0"

  tarantool:
    image: ${TARANTOOL_IMAGE}
    container_name: asfp-tarantool
    environment:
      TARANTOOL_USER_NAME: ${TARANTOOL_USER_NAME}
      TARANTOOL_USER_PASSWORD: ${TARANTOOL_USER_PASSWORD}
    command: tarantool /opt/tarantool/init/init.lua
    volumes:
      - tarantool_data:/var/lib/tarantool
      - ./init/tarantool:/opt/tarantool/init
    ports:
      - "3301:3301"
    healthcheck:
      test: ["CMD-SHELL", "nc -z 127.0.0.1 3301"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped
    mem_limit: 512m
    cpus: "1.0"

  redis:
    image: ${REDIS_IMAGE}
    container_name: asfp-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    mem_limit: 256m
    cpus: "0.5"

  ceph:
    image: ${MINIO_IMAGE}
    container_name: asfp-ceph
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      MINIO_REGION_NAME: ${S3_REGION}
    command: server /data --address :7480 --console-address :9001
    ports:
      - "7480:7480"
      - "9001:9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://127.0.0.1:7480/minio/health/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    volumes:
      - ceph_data:/data
    restart: unless-stopped
    mem_limit: 1024m
    cpus: "1.0"

  gateway:
    build:
      context: ..
      dockerfile: gateway/Dockerfile
    container_name: asfp-gateway
    depends_on:
      postgres:
        condition: service_healthy
      tarantool:
        condition: service_healthy
      ceph:
        condition: service_healthy
    env_file: .env
    environment:
      GATEWAY_DATABASE_URL: ${DATABASE_URL}
      GATEWAY_TARANTOOL_ADDR: ${GATEWAY_TARANTOOL_ADDR}
      GATEWAY_TARANTOOL_QUEUE: ${GATEWAY_TARANTOOL_QUEUE}
      GATEWAY_CLICKHOUSE_DSN: ${CLICKHOUSE_DSN}
      GATEWAY_S3_ENDPOINT: ${GATEWAY_S3_ENDPOINT}
      GATEWAY_S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      GATEWAY_S3_SECRET_KEY: ${S3_SECRET_KEY}
      GATEWAY_S3_REGION: ${GATEWAY_S3_REGION}
      GATEWAY_S3_BUCKET: ${S3_BUCKET}
      GATEWAY_S3_USE_SSL: ${GATEWAY_S3_USE_SSL}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:8080/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.75"

  crm:
    build:
      context: ..
      dockerfile: modules/crm/Dockerfile
    container_name: asfp-crm
    depends_on:
      postgres:
        condition: service_healthy
      tarantool:
        condition: service_healthy
    env_file: .env
    environment:
      CRM_DATABASE_URL: ${DATABASE_URL}
      CRM_TARANTOOL_ADDR: ${CRM_TARANTOOL_ADDR}
      CRM_TARANTOOL_QUEUE: ${CRM_TARANTOOL_QUEUE}
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:8081/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.75"

  wms:
    build:
      context: ..
      dockerfile: modules/wms/Dockerfile
    container_name: asfp-wms
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      WMS_DATABASE_URL: ${DATABASE_URL}
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:8082/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.75"

  mes:
    build:
      context: ..
      dockerfile: modules/mes/Dockerfile
    container_name: asfp-mes
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      MES_DATABASE_URL: ${MES_DATABASE_URL}
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:8083/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.75"

  montage:
    build:
      context: ..
      dockerfile: modules/montage/Dockerfile
    container_name: asfp-montage
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      MONTAGE_DATABASE_URL: ${MONTAGE_DATABASE_URL}
    ports:
      - "8084:8084"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:8084/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.75"

  docs:
    build:
      context: ..
      dockerfile: modules/docs/Dockerfile
    container_name: asfp-docs
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      DOCS_DATABASE_URL: ${DOCS_DATABASE_URL}
    ports:
      - "8085:8085"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:8085/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.75"

  bpm:
    build:
      context: ..
      dockerfile: modules/bpm/Dockerfile
    container_name: asfp-bpm
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      BPM_DATABASE_URL: ${BPM_DATABASE_URL}
    ports:
      - "8086:8086"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:8086/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.75"

  analytics:
    build:
      context: ..
      dockerfile: modules/analytics/Dockerfile
    container_name: asfp-analytics
    depends_on:
      postgres:
        condition: service_healthy
      tarantool:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    env_file: .env
    environment:
      ANALYTICS_DATABASE_URL: ${DATABASE_URL}
      ANALYTICS_TARANTOOL_ADDR: ${ANALYTICS_TARANTOOL_ADDR}
      ANALYTICS_TARANTOOL_QUEUE: ${ANALYTICS_TARANTOOL_QUEUE}
      ANALYTICS_CLICKHOUSE_DSN: ${CLICKHOUSE_DSN}
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.75"

  analytics-api:
    build:
      context: ..
      dockerfile: modules/analytics/Dockerfile
    container_name: asfp-analytics-api
    depends_on:
      clickhouse:
        condition: service_healthy
    env_file: .env
    environment:
      ANALYTICS_DATABASE_URL: ${DATABASE_URL}
      ANALYTICS_CLICKHOUSE_DSN: ${CLICKHOUSE_DSN}
      ANALYTICS_HTTP_PORT: ${ANALYTICS_HTTP_PORT}
    entrypoint: ["./analytics-api"]
    ports:
      - "${ANALYTICS_HTTP_PORT:-8090}:${ANALYTICS_HTTP_PORT:-8090}"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:${ANALYTICS_HTTP_PORT:-8090}/ready || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 25s
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.5"

  nginx:
    image: ${NGINX_IMAGE}
    container_name: asfp-nginx
    depends_on:
      - gateway
      - crm
      - wms
      - analytics-api
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - "8000:80"
      - "8443:443"
    restart: unless-stopped
    mem_limit: 256m
    cpus: "0.5"

volumes:
  postgres_data:
  clickhouse_data:
  tarantool_data:
  ceph_data:
